<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="dracor" xmlns:xdb="http://exist-db.org/ant">

    <property environment="env"/>
    <property name="build.dir" value="build"/>
    <property file="local.build.properties"/>
    <property file="build.properties"/>
    <xmlproperty file="expath-pkg.xml.tmpl"/>
    <tstamp>
        <format property="timestamp" pattern="hhmmss" />
    </tstamp>

    <target name="xar" depends="corpora">
        <copy file="expath-pkg.xml.tmpl" tofile="expath-pkg.xml" filtering="true" overwrite="true">
            <filterset>
                <filter token="project.version" value="${project.version}"/>
                <filter token="project.title" value="${project.title}"/>
                <filter token="project.abbrev" value="${project.abbrev}"/>
                <filter token="project.name" value="${project.name}"/>
                <filter token="project.processorversion" value="${project.processorversion}"/>
            </filterset>
        </copy>
        <mkdir dir="${build.dir}"/>
        <zip basedir="." destfile="${destfile}"
            excludes="${build.dir}/ ${test.dir}/ ${devel.dir}/ existdb.json"/>
    </target>

    <target name="test-corpora" if="${testdracor}">
      <copy file="test-corpora.xml" tofile="corpora.xml" overwrite="true"/>
    </target>
    <target name="corpora" depends="test-corpora">
      <copy file="all-corpora.xml" tofile="corpora.xml" overwrite="false"/>
    </target>

    <target name="cleanup">
        <delete dir="${test.dir}"/>
    </target>

    <target name="test" depends="cleanup, xar">
        <prepare-exist dir="${test.dir}"/>
        <!-- check for metrics -->
        <get src="http://localhost:8030/" quiet="true" ignoreerrors="true" dest="anttmp-${timestamp}" skipexisting="false"/>
        <condition property="test4metrics">
            <available file="anttmp-${timestamp}" type="file" />
        </condition>
        <delete file="anttmp-${timestamp}"/>
        <antcall target="test4metrics"/>
    </target>

    <target name="test4metrics" unless="${test4metrics}">
        <echo  level="warning" message="metrics service is not available." />
        <echo  level="warning" message="trying to start is from ../dracor-metrics dir." />
        <exec spawn="true" dir="../dracor-metrics" executable="npm">
            <arg value="start"/>
        </exec>
        <echo  level="warning" message="metrics should be up and running." />
    </target>

    <target name="devel" depends="xar">
      <condition property="devel.available">
        <available file="${devel.dir}" type="dir" />
      </condition>
      <fail if="devel.available">Build aborted. You have to delete «${devel.dir}» at first.</fail>
      <prepare-exist dir="${devel.dir}"/>
    </target>

    <macrodef name="prepare-exist">
        <attribute name="dir"/>
        <attribute name="available" default="true"/>
        <sequential>
            <property name="install.dir" value="@{dir}/eXist-db-${project.processorversion}"/>
            <echo message="${install.dir}"/>
            <!-- get exist -->
            <get src="https://bintray.com/existdb/releases/download_file?file_path=eXist-db-${project.processorversion}.tar.bz2" dest="${build.dir}/eXist-db-${project.processorversion}.tar.bz2" skipexisting="true" />
            <untar src="${build.dir}/eXist-db-${project.processorversion}.tar.bz2" dest="@{dir}" compression="bzip2" />
            <!-- get dependencies -->
            <get src="http://exist-db.org/exist/apps/public-repo/find.zip?abbrev=expath-crypto-exist-lib&amp;semver=0.3.5" dest="${install.dir}/autodeploy/crypto-0.3.5.xar" ignoreerrors="true"/>
            <get src="http://exist-db.org/exist/apps/public-repo/find.zip?abbrev=exist-sparql&amp;processor=${project.processorversion}" dest="${install.dir}/autodeploy/sparql-latest.xar" ignoreerrors="true"/>
            <copy file="${destfile}" todir="${install.dir}/autodeploy" />

            <xslt
                in="${install.dir}/conf.xml"
                out="${install.dir}/conf.xml.tmp"
                style="resources/ant/exist-conf.xslt">
            </xslt>
            <move
                file="${install.dir}/conf.xml.tmp"
                tofile="${install.dir}/conf.xml"/>

            <!-- HTTP port -->
            <property name="xsl" value="resources/ant/jetty-port-update.xslt"/>
            <xslt
                in="${install.dir}/tools/jetty/etc/jetty-http.xml"
                out="${install.dir}/tools/jetty/etc/jetty-http-tmp.xml"
                style="${xsl}">
                <param name="customPort" expression="${jetty.http.port}"/>
            </xslt>
            <move
                file="${install.dir}/tools/jetty/etc/jetty-http-tmp.xml"
                tofile="${install.dir}/tools/jetty/etc/jetty-http.xml"/>

            <!-- HTTPS port -->
            <xslt
                in="${install.dir}/tools/jetty/etc/jetty-ssl.xml"
                out="${install.dir}/tools/jetty/etc/jetty-ssl-tmp.xml"
                style="${xsl}">
                <param name="customPort" expression="${jetty.https.port}"/>
            </xslt>
            <move
                file="${install.dir}/tools/jetty/etc/jetty-ssl-tmp.xml"
                tofile="${install.dir}/tools/jetty/etc/jetty-ssl.xml"/>

            <xslt
                in="${install.dir}/tools/jetty/etc/jetty.xml"
                out="${install.dir}/tools/jetty/etc/jetty-tmp.xml"
                style="${xsl}">
                <param name="customPort" expression="${jetty.https.port}"/>
            </xslt>
            <move
                file="${install.dir}/tools/jetty/etc/jetty-tmp.xml"
                tofile="${install.dir}/tools/jetty/etc/jetty.xml"/>
        </sequential>
    </macrodef>
</project>
